generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
  seed          = "seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())

  favoriteArtworks Artwork[] @relation("UserFavorites")
}

enum UserRole {
  ADMIN
  USER
}

model Artwork {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime @default(now())
  imageUrl    String?

  // Relations
  artistProductions Production[]
  favoriteBy        User[]       @relation("UserFavorites") 

  colors ArtworkColor[]
  period ProductionPeriod?
}

model Artist {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  bio         String?
  birthDate   DateTime?
  deathDate   DateTime?
  nationality String?
  gender      String?

  productions Production[]
}

model Production {
  id          Int     @id @default(autoincrement())
  artwork     Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId   Int
  artist      Artist  @relation(fields: [artistId], references: [id])
  artistId    Int
  creatorRole String? // Role in the creation (e.g., "Efter")
}

model ProductionPeriod {
  id         Int      @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  periodName String?

  artwork   Artwork? @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId Int?     @unique
}

model ArtworkColor {
  id        Int     @id @default(autoincrement())
  color     String // Hex color code
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade)
  artworkId Int
}
